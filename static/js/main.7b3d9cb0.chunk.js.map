{"version":3,"sources":["components/item.js","items.js","components/todolist.js","serviceWorker.js","index.js"],"names":["Item","_ref","item","handleRemoveClick","handleMarkAsDone","itemClasses","cn","done","react_default","a","createElement","id","className","key","title","onClick","items","TodoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","list","toConsumableArray","inputRef","React","createRef","generateId","bind","assertThisInitialized","addItem","removeItem","markAsDone","enterPressed","markAll","min","arguments","length","undefined","max","Math","floor","random","_this2","input","current","value","shown","setState","concat","console","log","focus","prevState","filter","i","map","e","keyCode","which","target","checked","_this3","type","ref","onKeyPress","Component","Boolean","window","location","hostname","match","ReactDOM","render","todolist_TodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b3d9cb0.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\n\nexport default function Item({ item, handleRemoveClick, handleMarkAsDone }) {\n    const itemClasses = cn('item ' + (item.done ? 'done' : 'normal'));\n\n    return (\n        <li\n            id={item.id}\n            className={itemClasses}\n            key={item.id}>\n            <span>{item.title}</span>\n            <button\n                className=\"remove\"\n                onClick={() => handleRemoveClick(item)}>\n                Remove item\n            </button>\n            <button\n                onClick={() => handleMarkAsDone(item)}>\n                Mark as done\n            </button>\n        </li>\n    );\n}\n","export const items = [\n    {\n        id: '111',\n        title: 'do something',\n        done: false\n    },\n    {\n        id: '222',\n        title: 'do another thing',\n        done: true\n    }\n];\n","import React from 'react';\nimport cn from 'classnames';\nimport Item from './item';\nimport { items } from './../items';\n\nexport default class TodoList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            list: [...items]\n        };\n        this.inputRef = React.createRef();\n\n        this.generateId = this.generateId.bind(this);\n        this.addItem = this.addItem.bind(this);\n        this.removeItem = this.removeItem.bind(this);\n        this.markAsDone = this.markAsDone.bind(this);\n        this.enterPressed = this.enterPressed.bind(this);\n        this.markAll = this.markAll.bind(this);\n    }\n\n    generateId(min = 1, max = 1000) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n\n    addItem() {\n        const input = this.inputRef.current;\n        if (input.value) {\n\n            const item = {\n                id: this.generateId(),\n                title: input.value,\n                done: false,\n                shown: false\n            }\n            this.setState(() => ({\n                list: [...this.state.list, item]\n            }), console.log('addItem'));\n\n            input.value = '';\n            input.focus();\n        }\n    }\n\n    removeItem(item) {\n        this.setState(prevState => ({\n            list: prevState.list.filter(i => i.id !== item.id)\n        }), console.log('removeItem'));\n    }\n\n    markAsDone(item) {\n        const list = this.state.list.map((i) => {\n            if (i.id === item.id) {\n                item.done = !item.done;\n            }\n            return i;\n        });\n        this.setState({ list });\n    }\n\n    enterPressed(e) {\n        const code = e.keyCode || e.which;\n        if (code === 13) {\n            this.addItem();\n        }\n    }\n\n    markAll(e) {\n        const list = this.state.list.map((i) => {\n            i.done = e.target.checked;\n            return i;\n        })\n        this.setState({ list });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>TodoList App</h1>\n\n                <h3>items:</h3>\n                {!this.state.list.length && (\n                    <div>No items on the list</div>\n                )}\n\n                {this.state.list && (\n                    <ul>\n                        {this.state.list.map(i => (\n                            <Item\n                                item={i}\n                                handleRemoveClick={this.removeItem}\n                                handleMarkAsDone={this.markAsDone}\n                            />\n                        ))}\n\n                    </ul>\n                )}\n\n                <input type=\"checkbox\" onClick={this.markAll} />\n                <input\n                    type=\"text\"\n                    ref={this.inputRef}\n                    onKeyPress={this.enterPressed}\n                />\n                <button className=\"add\" onClick={this.addItem}>Add Item</button>\n\n            </div>\n        )\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './components/todolist';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}